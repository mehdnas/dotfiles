#+title: My Emacs Configuration

#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes
#+PROPERTY: header-args:yaml :tangle ./ansible/emacs_required_packages.yml :mkdirp yes

* Package System Setup

#+begin_src emacs-lisp

   ;; Initialize package sources
   (require 'package)

   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")
                            ("elpa" . "https://elpa.gnu.org/packages/")))

   (package-initialize)
   (unless package-archive-contents
     (package-refresh-contents))

     ;; Initialize use-package on non-Linux platforms
   (unless (package-installed-p 'use-package)
     (package-install 'use-package))

   (require 'use-package)
   (setq use-package-always-ensure t)

#+end_src

Vars file for required packages to be installed by ansible

#+begin_src yaml
  ---
  - emacs_required_packages:
#+end_src


* Desktop environment


** Logout

#+begin_src emacs-lisp

  (defun mn/desktop-logout ()
    (interactive)
    (save-some-buffers)
    (start-process-shell-command "logout" nil "lxsession-logout"))

#+end_src

** Composite manager

#+begin_src emacs-lisp

  (defun mn/run-composite-manager ()
    (async-shell-command "compton"))

#+end_src

** EXWM

#+begin_src emacs-lisp
  (use-package exwm
    :init
    (setq mouse-autoselect-window nil
          focus-follows-mouse t
          exwm-workspace-warp-cursor t
          exwm-workspace-number 9)
    :config
    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-h
            ?\M-x
            ?\M-o
            ?\M-&
            ?\M-:
            ?\C-\M-n  ;; Next workspace
            ?\C-\     ;; Ctrl+Space
            ?\C-\;))

    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; Move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)


    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Make class name the buffer name
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (exwm-workspace-rename-buffer exwm-class-name)))
    (add-hook 'exwm-update-title-hook
              (lambda ()
                (pcase exwm-class-name
                  ;;("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
                  ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title))))))
    (mn/run-composite-manager)
    (exwm-enable))

  ;; Enable exwm-randr before exwm-init gets called
  (use-package exwm-randr
    :ensure nil
    :after (exwm)
    :config
    (exwm-randr-enable)
    (setq exwm-randr-workspace-monitor-plist '(4 "eDP-1" 8 "HDMI-1")))

#+end_src

** Desktop functionality

#+begin_src emacs-lisp

  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-")
    (desktop-environment-screenshot-command "flameshot gui"))

#+end_src

#+begin_src yaml

  # used by desktop environment to change screen brightness
    - brightnessctl

#+end_src


* Window management

** Window selection (ace-window)

#+begin_src emacs-lisp

  (use-package ace-window
    :bind (("M-o" . ace-window))

    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)

    :config
    (ace-window-display-mode 1))

#+end_src

** Window history (winner-mode)

#+begin_src emacs-lisp

  (use-package winner
    :after evil
    :config
    (winner-mode)
    (define-key evil-window-map "u" 'winner-undo)
    (define-key evil-window-map "U" 'winner-redo))

#+end_src


* UI

** Appearance

*** Basic configuration

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

*** Color Theme
#+begin_src emacs-lisp

  (use-package doom-themes
    :init
    (load-theme 'doom-palenight t)
    (doom-themes-visual-bell-config))

#+end_src

*** Modeline

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

*** Frame transparency

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(92 . 92))
  (add-to-list 'default-frame-alist '(alpha . (92 . 92)))

#+end_src


** Improve scrolling

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(2 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)

#+end_src

** Scaling / Zooming

#+begin_src emacs-lisp

  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy-rich
    :after ivy counsel
    :init
    (ivy-rich-mode 1))

  (use-package ivy-hydra
    :defer t
    :after hydra)

#+end_src

** Candidate sorting

#+begin_src emacs-lisp

  (use-package prescient
    :after counsel
    :config
    (prescient-persist-mode 1))

  (use-package ivy-prescient
    :after prescient
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src


* Key Bindings

** evil
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))

#+end_src

** Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :defer 1)

#+end_src


* File browsing

** Dired

#+begin_src emacs-lisp

    (use-package all-the-icons-dired)

    (use-package dired
      :ensure nil
      :defer 1
      :commands (dired dired-jump)

      :config
      (setq dired-listing-switches "-agho --group-directories-first"
            dired-omit-files "^\\.[^.].*"
            dired-omit-verbose nil
            dired-hide-details-hide-symlink-targets nil
            dired-delete-by-moving-to-trash t)

      (autoload 'dired-omit-mode "dired-x")

      (add-hook 'dired-mode-hook
                (lambda ()
                  (interactive)
                  (dired-omit-mode 1)
                  (dired-hide-details-mode 1)
                  (all-the-icons-dired-mode 1)
                  (hl-line-mode 1)))

  (use-package dired-rainbow
      :defer 2
      :config
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-single
    :defer t)

  (use-package dired-ranger
    :defer t)

  (use-package dired-collapse
    :defer t)

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste))

#+end_src

** Opening files externally

#+begin_src emacs-lisp

  (use-package openwith
    :config
    (setq openwith-associations
          (list
            (list (openwith-make-extension-regexp
                  '("mpg" "mpeg" "mp3" "mp4"
                    "avi" "wmv" "wav" "mov" "flv"
                    "ogm" "ogg" "mkv"))
                  "mpv"
                  '(file))
            (list (openwith-make-extension-regexp
                  '("xbm" "pbm" "pgm" "ppm" "pnm"
                    "png" "gif" "bmp" "tif" "jpeg")) ;; Removed jpg because Telega was
                    ;; causing feh to be opened...
                    "feh"
                    '(file))
            (list (openwith-make-extension-regexp
                  '("pdf"))
                  "zathura"
                  '(file))))
    (openwith-mode 1))

#+end_src

#+begin_src yaml

  # Packages for opning files from emacs
    # - mpv-mpris # needs the rpm fusion repos
    - feh
    - zathura-pdf-mupdf

#+end_src


* Editing configurations

** Auto-Revert changed files

#+begin_src emacs-lisp

  (setq global-auto-revert-none-file-buffers t)

  (global-auto-revert-mode 1)

#+end_src

** Match and Highlight matching Braces

#+begin_src emacs-lisp

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

  (use-package smartparens
    :hook ((prog-mode . smartparens-mode)
           (text-mode . smartparens-mode)))

#+end_src

** Tab Settings

#+begin_src emacs-lisp

  (setq-default tab-width 3)
  (setq-default evil-shift-width tab-width)

  (setq-default indent-tabs-mode nil)

#+end_src

** Comenting lines

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-," . evilnc-comment-or-uncomment-lines))

#+end_src

** Automatically clean whitespace

#+begin_src emacs-lisp

  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))

#+end_src

** Folding (origami)

#+begin_src emacs-lisp

  (use-package origami
    :hook (yaml-mode . origami-mode))

#+end_src

** Jumping (Avy)

#+begin_src emacs-lisp

  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

#+end_src

** Fill column

#+begin_src emacs-lisp

  (setq-default fill-column 80)

#+end_src


* Org mode

** A function for the hook to setup org mode

#+begin_src emacs-lisp

  (defun mn/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (setq evil-auto-indent nil))
    ;; (diminish org-indent-mode))

#+end_src

** Baseline configuration for Org mode

#+begin_src emacs-lisp

  (defun mn/org-baseline-config ()
    (setq
     org-hide-emphasis-markers t
     org-src-fontify-natively t
     org-src-tab-acts-natively t
     org-edit-src-content-indentation 2
     org-hide-block-startup nil
     org-src-preserve-indentation nil
     org-startup-folded 'content
     org-cycle-separator-lines 2)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t))))
#+end_src

** Final configuration for org mode

#+begin_src emacs-lisp

  (use-package org
    :defer t
    :hook (org-mode . mn/org-mode-setup)
    :config (mn/org-baseline-config))

#+end_src


* Development

** Git (Magit)

#+begin_src emacs-lisp

  (use-package magit
    :bind ("C-M-," . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Terminal

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^\[[^$]*\]$ *")
    (setq vterm-max-scrollback 10000))

#+end_src

#+begin_src yaml
  # Packages required by vterm
    - cmake
    - libtool
    - gcc
#+end_src

** Projects

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :demand t
    :bind-keymap
    ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :after projectile
    :bind (("C-M-p" . counsel-projectile-find-file))
    :config
    (counsel-projectile-mode))

  (use-package treemacs
    :bind ("C-c t" . treemacs-select-window)
    :after lsp-mode)

#+end_src

** Language Server Protocol

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands lsp
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))

#+end_src

** Debug Adapter

#+begin_src emacs-lisp

  (use-package dap-mode
    :custom
    (lsp-enable-dap-auto-configure nil)
    :config
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (require 'dap-node)
    (dap-node-setup))

#+end_src

** Productivity

*** Syntax checking (Flycheck)

#+begin_src emacs-lisp

  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))

#+end_src

*** Snippets

#+begin_src emacs-lisp

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

#+end_src

*** Completions

#+begin_src emacs-lisp

(use-package corfu
  :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous)
         ("C-f" . corfu-insert))
  :custom
  (corfu-cycle t)
  :config
  (corfu-global-mode))

#+end_src

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)

    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
                ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 3)
    (company-idle-delay 0.2))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Languages

*** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode
    :mode "\\.ya?ml\\'"
    :hook (yaml-mode . lsp))

#+end_src

#+begin_src yaml

  # Needed to install some of the language servers
    - nodejs

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp)

    :custom
    (dap-python-debugger 'debugpy)

    :config
    (require 'dap-python))

#+end_src

#+begin_src yaml

  # The language server for python (can't be installed by lsp-mode)
    - python-lsp-server

#+end_src

*** Ada

#+begin_src emacs-lisp

  (use-package ada-mode
    :ensure t
    :hook (ada-mode . lsp))

#+end_src

*** Shell scripts

#+begin_src emacs-lisp

  (use-package sh-mode
    :ensure nil
    :hook (sh-mode . lsp))

#+end_src

*** Java

#+begin_src emacs-lisp

  (use-package lsp-java
    :ensure t
    :hook (java-mode . lsp))

#+end_src

#+begin_src yaml

  # Used to build java projects
    - maven

#+end_src

*** XML

#+begin_src emacs-lisp

  (use-package nxml-mode
    :ensure nil
    :hook (nxml-mode . lsp))

#+end_src


* Misc

** Logging commands

#+begin_src emacs-lisp

  (use-package command-log-mode)

#+end_src
